#version 430 core
// This is the fragment shader
// The program in this file will be run separately for each fragment (pixel) that is drawn

// These are the per-fragment inputs
// They must match with the outputs of the vertex shader
in vec3 eyeSpaceNormalV;
in vec3 eyeSpaceLightPosV;
in vec3 eyeSpaceVertPosV;

// These variables will be the same for every vertex in the model
// They are mostly material and light properties
// We provide default values in case the program doesn't set them
uniform vec3 lightColour = {1,1,1};
uniform vec3 emissiveColour = {0,0,0};
uniform vec3 ambientColour  = {0.1f,0.1f,0.2f};
uniform vec3 diffuseColour  = {0.8f,0.1f,0.1f};
uniform vec3 specularColour = {0.0f,1.0f,0.0f};
uniform float shininess     = 50.0f;
uniform float alpha         = 1.0f;
uniform float roughness = 1.0f;
uniform float PI = 3.14f;
uniform vec3 albedo = {1,1,1};
uniform float useDiffuse = 1.0f; 
uniform float useSpecular = 1.0f; 
uniform float useSpecularDist = 1.0f; 
uniform float useSpecularGeom = 1.0f;

// This is the output, it is the fragment's (pixel's) colour
out vec4 fragColour;
//lab2
vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
	return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}
//lab2
float DistributionGGX(vec3 N, vec3 H, float a)
{
	float a2 = a*a;
	float NdotH = max(dot(N,H), 0.0);
	float NdotH2 = NdotH*NdotH;
	float nom = a2;
	float denom = (NdotH2 * (a2 - 1.0) + 1.0);
	denom = PI * denom * denom;

	return nom / denom;
}
//lab2
float GeometrySchlickGGX(float NdotV, float k)
{
    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;
	
    return nom / denom;
}
//lab2
float GeometrySmith(vec3 N, vec3 V, vec3 L, float k)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx1 = GeometrySchlickGGX(NdotV, k);
    float ggx2 = GeometrySchlickGGX(NdotL, k);
	
    return ggx1 * ggx2;
}

// The actual program, which will run on the graphics card
void main()
{
	// This is the direction from the fragment to the light, in eye-space
	vec3 lightDir = normalize( eyeSpaceLightPosV - eyeSpaceVertPosV );
	// Re-normalise the normal just in case
	vec3 normal = normalize( eyeSpaceNormalV );
	vec3 eyeDir = normalize( -eyeSpaceVertPosV );
	vec3 halfVec = normalize(eyeDir + lightDir);
	vec3 F0 = vec3(0.04,0.04,0.04);

	//lab2
	vec3 radiance = lightColour;
	float NDF = DistributionGGX(normal, halfVec, roughness);
	float Geom = GeometrySmith(normal, eyeDir, lightDir, roughness);
	vec3 Fresnel = fresnelSchlick(max(dot(halfVec, eyeDir), 0.0), F0);
	vec3 numerator = mix(1.0, NDF, useSpecularDist) * mix(1.0, Geom, useSpecularGeom) * Fresnel;
	float denominator = 4.0 * max(dot(normal, eyeDir), 0.0) * max(dot(normal, lightDir), 0.0) + 0.0001;

	vec3 specular = numerator / denominator;

	float NdotL = max(dot(normal, lightDir), 0.0);
	vec3 ambient = ambientColour * albedo;

	vec3 diffuse = ((1-Fresnel) * albedo) / PI;
	vec3 colour = (diffuse * useDiffuse + specular * useSpecular) * radiance * NdotL;

	fragColour = vec4(emissiveColour + ambient + colour, alpha);

	//pre physical based rendering stuff 
		// This is where you need to write your code!
		//vec3 diffuse = diffuseColour * max(0,dot(normal,lightDir));
		
		// This is where you need to write your code!

		//float facing = float (dot(normal, lightDir) > 0);

		//traditional specular calculation, using physical based rendering now
		//vec3 specular = specularColour * lightColour * facing * pow( max(dot(normal, halfVec), 0), shininess);
		
		// The final output colour is the emissive + ambient + diffuse + specular
		//fragColour = vec4( emissiveColour + ambientColour + diffuse + specular, alpha);
}
